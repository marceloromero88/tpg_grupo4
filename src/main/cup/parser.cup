package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal ELSE;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;
terminal IF;
terminal COMA;
terminal PUNTO_COMA;
terminal OPERACION_TIPO;
terminal CORCH_ABIERTO;
terminal CORCH_CERRADO;
terminal LLAVE_ABIERTA;
terminal LLAVE_CERRADA;
terminal MENOR_IG;
terminal MENOR;
terminal MAYOR_IG;
terminal MAYOR;
terminal IGUAL;
terminal DISTINTO;
terminal WHILE;
terminal AND;
terminal OR;
terminal WRITE;
terminal READ;
terminal NOT;
terminal INIT;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;
terminal END;
terminal ESTACONTENIDO;



// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condicion;
non terminal rw;
non terminal condiciones;
non terminal comparador;
non terminal operador_logico;
non terminal sentencias_init;
non terminal sentencias_init2;
non terminal tipo_variable;
non terminal recursivos;
non terminal condicioncase;
non terminal else;


// Start Symbol Definition
start with sentence;


sentence ::= assignment {: System.out.println("0 - End"); :};
assignment ::= IDENTIFIER:id ASSIG expression {: System.out.println(" 1- IDENTIFIER ASSIG expression"); :};
assignment ::= assignment IDENTIFIER ASSIG expression {: System.out.println("2 -assignment IDENTIFIER ASSIG expression"); :};
assignment ::= INIT LLAVE_ABIERTA sentencias_init LLAVE_CERRADA {: System.out.println("3 -INIT LLAVE_ABIERTA sentencias_init LLAVE_CERRADA"); :};
assignment ::= assignment INIT CORCH_ABIERTO sentencias_init CORCH_CERRADO {: System.out.println("4 -assignment INIT"); :};
assignment ::= IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA else {: System.out.println("5 -IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA {: System.out.println("6 -IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= assignment IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA {: System.out.println("7 -assignment IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= assignment IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA else {: System.out.println("8 -assignment IF OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= assignment WHILE OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA {: System.out.println("9 -assignment WHILE OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= WHILE OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA {: System.out.println("10 - WHILE OPEN_BRACKET condiciones CLOSE_BRACKET LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};
assignment ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("11 -READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET"); :};
assignment ::= assignment READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("12 -assignment READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET"); :};
assignment ::= WRITE OPEN_BRACKET factor CLOSE_BRACKET {: System.out.println("13 - WRITE OPEN_BRACKET factor CLOSE_BRACKET"); :};
assignment ::= assignment WRITE OPEN_BRACKET factor CLOSE_BRACKET {: System.out.println("14 -assignment WRITE OPEN_BRACKET factor CLOSE_BRACKET"); :};
assignment ::= assignment DO factor recursivos ENDDO {: System.out.println("15 - DO factor recursivos DEFAULT opcional ENDDO"); :};
assignment ::= assignment DO factor recursivos DEFAULT assignment ENDDO {: System.out.println("16 - DO factor recursivos DEFAULT opcional ENDDO"); :};
assignment ::= DO factor recursivos ENDDO {: System.out.println("17 - DO factor recursivos DEFAULT opcional ENDDO"); :};
assignment ::= DO factor recursivos DEFAULT assignment ENDDO {: System.out.println("18 - DO factor recursivos DEFAULT opcional ENDDO"); :};
assignment ::= ESTACONTENIDO OPEN_BRACKET factor COMA factor CLOSE_BRACKET {: System.out.println("18 bis - ESTACONTENIDO OPEN_BRACKET factor COMA factor CLOSE_BRACKET"); :};
recursivos ::= recursivos CASE condicioncase assignment {: System.out.println("19 - recursivos CASE condicioncase assignment"); :}; 
recursivos ::= CASE condicioncase assignment {: System.out.println("20 - CASE condicioncase assignment "); :}; 
condicioncase ::= IDENTIFIER ASSIG factor {: System.out.println("21 - CASE condicioncase assignment "); :}; 
condicioncase ::= condicion ;
expression ::= expression PLUS term {: System.out.println(" 22 - +"); :};
expression ::= expression SUB term {: System.out.println("23 -"); :};
expression ::= term {: System.out.println("24 - Expression = Term"); :};
sentencias_init ::= sentencias_init sentencias_init2 OPERACION_TIPO tipo_variable {: System.out.println("25 - sentencias_init sentencias_init2 OPERACION_TIPO tipo_variable"); :};
sentencias_init ::= sentencias_init2 OPERACION_TIPO tipo_variable {: System.out.println("26 - sentencias_init2 OPERACION_TIPO tipo_variable"); :};
sentencias_init2 ::= sentencias_init2 COMA factor{: System.out.println("27 - sentencias_init2 COMA factor"); :};
sentencias_init2 ::= factor {: System.out.println("28 - factor"); :};
tipo_variable ::= FLOAT {: System.out.println("29 - Variable float"); :};
tipo_variable ::= INT {: System.out.println("30 - Variable int"); :};
tipo_variable ::= STRING {: System.out.println("31 - Variable string"); :};
condiciones  ::= condicion operador_logico condicion {: System.out.println("32 - condicion operador_logico condicion \n"); :};
condiciones  ::= condicion {: System.out.println("33 - CONDICION\n"); :};
condicion ::= IDENTIFIER comparador factor {: System.out.println("34 - condicion es: ID comparador constante \n"); :};
condicion ::= NOT IDENTIFIER comparador factor {: System.out.println("35 - condicion es: NOT ID comparador constante \n"); :};

condicion ::= ESTACONTENIDO OPEN_BRACKET factor COMA factor CLOSE_BRACKET {: System.out.println("35 bis - ESTACONTENIDO OPEN_BRACKET factor COMA factor CLOSE_BRACKET"); :};

operador_logico ::= AND {: System.out.println("36 - operador_logico es: AND \n"); :};
operador_logico ::= OR  {: System.out.println("37 - operador_logico es: OR \n"); :};
comparador  ::= MENOR_IG {: System.out.println("38 - comparador es MENOR_IG \n"); :};
comparador  ::= MENOR {: System.out.println("39 - comparador es MENOR \n"); :};
comparador  ::= MAYOR_IG {: System.out.println("40 - comparador es MAYOR_IG \n"); :};
comparador  ::= MAYOR {: System.out.println("41 - comparador es MAYOR \n"); :};
comparador  ::= IGUAL {: System.out.println("42 - comparador es IGUAL \n"); :};
comparador  ::= DISTINTO {: System.out.println("43 - comparador es DISTINTO \n"); :};
term ::= term MULT factor {: System.out.println("44 - *"); :};
term ::= term DIV factor {: System.out.println("45 - /"); :};
term ::= factor {: System.out.println("46 - Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("47 - Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("48 - Constant ENTERA: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("49 - Constant FLOTANTE: " + constant ); :};
factor ::= STRING_CONSTANT:constant {: System.out.println("50 - Constant STRING: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("51 - Factor = (Expression)"); :};
else ::= ELSE LLAVE_ABIERTA assignment LLAVE_CERRADA {: System.out.println("52 - ELSE LLAVE_ABIERTA assignment LLAVE_CERRADA"); :};